---
import { Sun } from "@lucide/astro";
import { Moon } from "@lucide/astro";
import { cn } from "@lib/utils";

interface Props {
  styles?: string;
}
const { styles } = Astro.props;

let theme =
  typeof document !== "undefined"
    ? document.documentElement.classList.contains("dark")
      ? "dark"
      : "theme-light"
    : "theme-light";

const setTheme = (newTheme: "dark" | "light" | "system") => {
  theme = newTheme;
  const isDark =
    newTheme === "dark" ||
    (newTheme === "system" &&
      window.matchMedia("(prefers-color-scheme: dark)").matches);

  document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  localStorage.setItem("theme", newTheme);
};

if (typeof window !== "undefined") {
  const savedTheme = localStorage.getItem("theme") as
    | "dark"
    | "light"
    | "system"
    | null;
  if (savedTheme) {
    theme = savedTheme;
    setTheme(savedTheme);
  }
}
---

<button
  id="theme-toggle"
  class={cn("inline-flex items-center justify-center whitespace-nowrap transition-colors", styles)}
  onclick="toggleTheme()"
>
  <Sun
    class="size-6 scale-100 text-primary rotate-0 transition-all dark:scale-0 dark:-rotate-90"
  />
  <Moon
    class="absolute size-6 scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0"
  />
  <span class="sr-only">Toggle theme</span>
</button>

<script is:inline>
  function toggleTheme() {
    const isDark = document.documentElement.classList.toggle("dark");
    localStorage.setItem("theme", isDark ? "dark" : "theme-light");
  }
</script>

<style>
  /* Estilos para la transici√≥n de los iconos */
  .dark .sun-icon {
    display: none;
  }
  .dark .moon-icon {
    display: block;
  }
  .sun-icon {
    display: block;
  }
  .moon-icon {
    display: none;
  }
</style>
